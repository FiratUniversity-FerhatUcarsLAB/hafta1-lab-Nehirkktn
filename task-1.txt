Öğrenci No: 250541039
AD-SOYAD: Nehir KÖKTEN

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:
// Dosya Adı: OyunSimulasyonu.java

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

// Ana ve tek public sınıfımız. Dosya adı bununla aynı olmalı.
 class OyunSimulasyonu {

    // --- YARDIMCI İÇ SINIF ---
    // GameState kalıbını, başka bir dosyaya ihtiyaç duymadan buraya yerleştirdik.
    // Bu sınıf sadece OyunSimulasyonu tarafından kullanılır.
    private static class GameState {
        int can;
        int dusmanSayisi;
        boolean ozelGucHazir;
        boolean riskliBonusVar;
        boolean oyunBitti;

        public GameState(int can, int dusmanSayisi, boolean ozelGucHazir, boolean riskliBonusVar, boolean oyunBitti) {
            this.can = can;
            this.dusmanSayisi = dusmanSayisi;
            this.ozelGucHazir = ozelGucHazir;
            this.riskliBonusVar = riskliBonusVar;
            this.oyunBitti = oyunBitti;
        }
    }

    // --- 1. Başlangıç Değişkenleri (Hafıza Kutuları) ---
    private static int enYuksekSkor = 0;
    private static int denemeSayisi = 0;
    private static ArrayList<String> ogrenilenDersler = new ArrayList<>();
    private static Random random = new Random(); // Rastgele olaylar için zar atma aracı

    // --- 2. Yardımcı Metotlar (Görevi Yapan Paketler) ---

    private static void bekle(int milisaniye) {
        try {
            Thread.sleep(milisaniye);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private static void hazirlikYap() {
        System.out.println("Yüksek skor algoritması başlatılıyor...");
        System.out.println("Oyunun kuralları ve skor mekanikleri analiz ediliyor...");
        enYuksekSkor = 0;
        System.out.println("Hazırlık tamamlandı. Mevcut rekor: " + enYuksekSkor);
        System.out.println("------------------------------------");
        bekle(2000);
    }

    private static GameState oyundanVeriAl(int oyunAdimi) {
        // Canın 0'ın altına düşmemesini sağlarız
        int can = Math.max(0, 3 - (oyunAdimi / 4));
        int dusmanSayisi = random.nextInt(5) + 1;
        boolean ozelGucHazir = random.nextDouble() < 0.3;
        boolean riskliBonusVar = random.nextDouble() < 0.4;
        // Oyun ya 10 adıma ulaşınca ya da can bitince biter
        boolean oyunBitti = (oyunAdimi >= 10 || can == 0);

        // Yukarıda tanımladığımız iç sınıftan yeni bir nesne oluşturuyoruz.
        return new GameState(can, dusmanSayisi, ozelGucHazir, riskliBonusVar, oyunBitti);
    }

    private static String hataninNedeniniAnalizEt() {
        String[] hatalar = {
                "gereksiz bir risk alındı ve can kaybedildi",
                "özel güç çok erken kullanıldı, boşa gitti",
                "kolay bir hedefe odaklanırken büyük fırsat kaçırıldı",
                "savunma yapılması gereken yerde saldırı yapıldı"
        };
        return hatalar[random.nextInt(hatalar.length)];
    }

    // --- 3. Ana Program Akışı (Olayın Başladığı Yer) ---
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        hazirlikYap();

        // <-- HATA DÜZELTME: Yanlış parantezler kaldırıldı ve döngü main metodunun içine alındı.
        while (true) {
            denemeSayisi++;
            int mevcutSkor = 0;
            int oyunAdimi = 0;
            boolean canliKaldi = true; // <-- EKLEME: Deneme sonunda kazanıp kazanmadığını kontrol etmek için.

            System.out.println("\n🚀 " + denemeSayisi + ". DENEME BAŞLIYOR! (Mevcut Rekor: " + enYuksekSkor + ")");
            bekle(1000);

            // <-- İÇ OYUN DÖNGÜSÜ
            while (true) {
                oyunAdimi++;
                GameState durum = oyundanVeriAl(oyunAdimi);

                // <-- MANTIKSAL EKLEME: Oyunun bitip bitmediğini burada kontrol ediyoruz.
                if (durum.oyunBitti) {
                    if (durum.can == 0) {
                        System.out.println("\nCan kalmadı... Oyun bitti.");
                        canliKaldi = false;
                    } else {
                        System.out.println("\nSüre doldu, deneme tamamlandı.");
                    }
                    break; // <-- Döngüyü kırarak denemeyi sonlandırıyoruz.
                }

                System.out.printf("Adım %d: (Can: %d, Düşman: %d) -> Karar: ", oyunAdimi, durum.can, durum.dusmanSayisi);
                bekle(500);

                // <-- MANTIKSAL EKLEME: Karar mekanizması genişletildi.
                if (durum.ozelGucHazir && durum.dusmanSayisi >= 4) {
                    System.out.println("💥 Özel güç kullanıldı! +500 Puan!");
                    mevcutSkor += 500;
                } else if (durum.riskliBonusVar && durum.can > 1) {
                    System.out.println("🎲 Riskli bonus alındı! +300 Puan, ama dikkatli olmalı.");
                    mevcutSkor += 300;
                } else {
                    System.out.println("⚔️ Standart saldırı yapıldı. +100 Puan.");
                    mevcutSkor += 100 * durum.dusmanSayisi;
                }
            } // <-- İç oyun döngüsünün sonu

            // <-- MANTIKSAL EKLEME: Deneme sonrası analiz ve skor kontrolü
            System.out.println("------------------------------------");
            System.out.println("DENEME SONUCU: " + mevcutSkor + " Puan");

            if (mevcutSkor > enYuksekSkor) {
                enYuksekSkor = mevcutSkor;
                System.out.println("🏆 YENİ REKOR KIRILDI! Yeni Yüksek Skor: " + enYuksekSkor);
                ogrenilenDersler.clear(); // Başarılı olunca eski hataları unutalım.
            } else {
                System.out.println("📉 Rekor kırılamadı. (Rekor: " + enYuksekSkor + ")");
                if (!canliKaldi) {
                    String ders = hataninNedeniniAnalizEt();
                    System.out.println("Öğrenilen Ders: " + ders);
                    ogrenilenDersler.add(ders);
                }
            }
            System.out.println("------------------------------------");

            // <-- MANTIKSAL EKLEME: Kullanıcıya devam edip etmeyeceğini sorma
            System.out.print("\nYeni bir deneme yapmak için 'e' yazıp enter'a basın (çıkmak için başka bir tuş): ");
            String devamMi = scanner.nextLine();
            if (!devamMi.equalsIgnoreCase("e")) {
                System.out.println("Simülasyon sonlandırılıyor.");
                break; // <-- Ana döngüyü kırar ve programı bitirir.
            }
        } // <-- Ana `while` döngüsünün sonu

        scanner.close(); // <-- Kaynak sızıntısını önlemek için scanner'ı kapatıyoruz.
    } // <-- `main` metodunun sonu
} // <-- `OyunSimulasyonu` sınıfının sonu
